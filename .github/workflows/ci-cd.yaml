name: KubeCart CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: product-catalog-service 
  SERVICE_PATH: product-catalog # ASSUMED PATH: Verify this is correct
  TAG: ${{ github.run_id }} 
  DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
  K8S_MANIFEST: kubernetes/manifests/KubeCart.yaml # Path to your manifest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # Define an output variable to pass the new image name to the deploy job
    outputs:
      new_image: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
      
    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üîë Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: üî® Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.SERVICE_PATH }}
          file: ${{ env.SERVICE_PATH }}/Dockerfile 
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}

  # ----------------------------------------------------
  # --- Kubernetes Deployment Job (Using kubectl set image) ---
  # ----------------------------------------------------
  deploy:
    needs: build-and-push # Depends on the build job
    runs-on: ubuntu-latest
    
    # Get the image tag output from the previous job
    env:
      NEW_IMAGE_TAG: ${{ needs.build-and-push.outputs.new_image }}
      
    steps:
      # This step needs KubeConfig access, which is highly dependent on your environment
      - name: ‚¨áÔ∏è Checkout Repository (Needed for access to KubeCart.yaml)
        uses: actions/checkout@v4
        
      # PLACEHOLDER FOR KUBECTL CONFIGURATION (e.g., config for GKE/EKS/AKS)
      # This is where you would install kubectl and configure cluster authentication.
      # For a local cluster like Minikube, this is often skipped or manually configured 
      # only to demonstrate the command logic.

      - name: üöÄ Update Deployment Image Tag
        # We use a placeholder run command here, but the actual kubectl command 
        # is the standard way to deploy a new image without changing the YAML file itself.
        run: |
          echo "Deployment: product-catalog-service-deployment"
          echo "New Image: ${{ env.NEW_IMAGE_TAG }}"
          
          # In a real environment, this command updates the deployment:
          # kubectl set image deployment/product-catalog-service-deployment product-catalog-service-container=${{ env.NEW_IMAGE_TAG }}
          
          echo "Deployment update simulated successfully."
