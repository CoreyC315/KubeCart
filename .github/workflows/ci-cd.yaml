name: KubeCart CI/CD Pipeline

# Trigger the workflow on pushes to the main branch
on:
  push:
    branches:
      - main
  # Allow manual runs from the GitHub Actions tab
  workflow_dispatch:

env:
  # Base name for the image (matches your Docker Hub name)
  IMAGE_NAME: product-catalog-service 
  # Use the GitHub Run ID as a unique tag
  TAG: ${{ github.run_id }} 
  DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
  # Define the path to the Dockerfile and service context
  SERVICE_PATH: services/product-catalog

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4

      # --- 1. Log in to Docker Hub ---
      - name: üîë Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      # --- 2. Build the Docker Image (Corrected Path) ---
      - name: üî® Build Docker Image
        uses: docker/build-push-action@v5
        with:
          # Set the context to the directory containing the files the Dockerfile needs (like requirements.txt)
          context: ${{ env.SERVICE_PATH }}
          # Explicitly specify the location of the Dockerfile
          file: ${{ env.SERVICE_PATH }}/Dockerfile 
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}

      # --- 3. Update Kubernetes Manifests (Optional but Recommended) ---
      - name: üìù Update K8s Manifest with New Image Tag
        uses: fjogeleit/yaml-update-action@main
        with:
          value: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
          propertyPath: "spec.template.spec.containers[0].image"
          filePath: "kubernetes/manifests/KubeCart.yaml" 
          commitChange: true

  # ----------------------------------------------------
  # --- Kubernetes Deployment Job (Basic Example) ---
  # ----------------------------------------------------
  deploy:
    needs: build-and-push 
    runs-on: ubuntu-latest
    
    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4
        
      - name: üöÄ Deploy to Kubernetes (using kubectl)
        run: |
          echo "Simulating deployment using kubectl apply..."
          
          # This command would be used to deploy the newly tagged image.
          # You still need to configure KubeConfig access in a real scenario.
          echo "Deployment complete for ${{ env.IMAGE_NAME }}:${{ env.TAG }}"
